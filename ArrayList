package org.example;

import java.util.ArrayList;
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {
        double[] nums = {1, 2, 3};
        System.out.println(Arrays.toString(append(null, 9)));

        // create an arraylist with no value
        ArrayList<Integer> nums2 = new ArrayList();
        ArrayList<Integer> nums22 = new ArrayList();

        // create an arrayList with initial values
        // use array as a helper
        int[] scores = {92, 95, 87, 97};
        ArrayList<Integer> nums3 = new ArrayList(Arrays.asList(scores));

        for (int score : scores) {
            nums2.add(0, score);
        }

        System.out.println(nums2);

        nums2.remove((Integer) 92);

        System.out.println(nums2);

        for (int i = 0; i < nums2.size(); i++) {
            System.out.println(nums2.get(i));
        }

        ArrayList<ArrayList<Double>> scoress = new ArrayList<>();

    }

    /**
     * sum all elements of a 2D array (regular for loop)
     * @param numss the input 2D array
     * @return the sum of all elements of the 2D array
     */
    public static double sum1(double[][] numss) {
        if (numss == null) {
            return 0;
        }

        double sum = 0;
        for (int i = 0; i < numss.length; i++) {
            if (numss[i] == null) {
                continue;
            }
            // column level
            for (int j = 0; j < numss[i].length; j++) {
                sum += numss[i][j];
            }
        }

        return sum;
    }

    /**
     * sum all elements of a 2D array (enhanced for loop)
     * @param numss the input 2D array
     * @return the sum of all elements of the 2D array
     */
    public static double sum2(double[][] numss) {
        if (numss == null) {
            return 0;
        }

        double sum = 0;

        for (double[] nums : numss) {
            if (nums == null) {
                continue;
            }
            for (double num : nums) {
                sum += num;
            }
        }

        return sum;
    }

    /**
     * sums all elements in each row of a 2D array
     * e.g.: {{1,2,3}, {4,5}, {}, {1}, null} -> {6,9,0,1,0}
     * @param numss the input 2D array
     * @return a 1D array that contains the sums of each row of the input 2D array
     */
    public static double[] sumEachRow(double[][] numss) {
        if (numss == null) {
            return null;
        }

        double[] sums = new double[numss.length];       // {0,0,0,0}

        for (int i = 0; i < numss.length; i++) {
            if (numss[i] == null) {
                continue;
            }
            for (double num : numss[i]) {
                sums[i] += num;
            }
        }

        return sums;
    }


    /**
     * Adds the corresponding elements of two arrays
     * @param nums1 the first input array to add
     * @param nums2 the second input array to add
     * @return the added array    1:18
     */
    public static double[] sumElements(double[] nums1, double[] nums2) {
        if (nums1 == null && nums2 == null) {
            return null;
        }

        if (nums1 == null) {
            return Arrays.copyOf(nums2, nums2.length);
        }

        if (nums2 == null) {
            return Arrays.copyOf(nums1, nums1.length);
        }

        int minLen = Math.min(nums1.length, nums2.length);
        int maxLen = Math.max(nums1.length, nums2.length);

        double[] results = new double[maxLen];

        for (int i = 0; i < minLen; i++) {
            results[i] = nums1[i] + nums2[i];
        }

        for (int i = minLen; i < maxLen; i++) {
            results[i] = (nums1.length >= nums2.length) ? nums1[i] : nums2[i];
        }

        return results;
    }

    /**
     * appends a new value at the end of an array
     * @param nums the input array
     * @param num the new value to append
     * @return the new array with the appended value
     */
    public static double[] append(double[] nums, double num) {
        if (nums == null) {
            return new double[]{num};
        }
        double[] nums2 = Arrays.copyOf(nums, nums.length + 1);

        nums2[nums.length] = num;

        return nums2;
    }

    /**
     * inserts a new element into an array at a specific index
     * @param nums the original array
     * @param idx the index to insert the new value
     * @param num the new value to insert
     * @return the new array after the inserting
     */
    public static double[] insert(double[] nums, int idx, double num) {
        if (nums == null) {
            return new double[]{num};
        }

        double[] nums2 = new double[nums.length + 1];

        for (int i = 0; i < idx; i++) {
            nums2[i] = nums[i];
        }

        nums2[idx] = num;

        for (int i = idx; i < nums.length; i++) {
            nums2[i + 1] = nums[i];
        }

        return nums2;
    }

    /**
     * delete the last element of an array
     * @param nums the input array
     * @return the array without the last element
     */
    public static double[] remove(double[] nums) {

    }

    /**
     * delete an element at a specific location in an array
     * @param nums the input array
     * @return the array without the deleted element
     */
    public static double[] remove(double[] nums, int idx) {

    }
}
